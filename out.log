15	  } while((n /= 10) > 0);
16	
17	  if(sign < 0)
18	    s[i++] = '-';
19	  s[i] = '\0';
20	
21	  j = strlen(s);
22	  for(i = 0, j = strlen(s)-1; i < j; i++, j--) {
23	    c = s[i];
24	    s[i] = s[j];
20	
21	  j = strlen(s);
22	  for(i = 0, j = strlen(s)-1; i < j; i++, j--) {
23	    c = s[i];
24	    s[i] = s[j];
25	    s[j] = (char)c;
26	  }
27	
28	  puts(s);
29	  
Breakpoint 1 at 0x7ff: file foo.c, line 21.
Breakpoint 2 at 0x885: file foo.c, line 28.
Temporary breakpoint 3 at 0x749: file foo.c, line 5.
Starting program: /home/fscorrea/C/foo 16

Temporary breakpoint 3, main (argc=2, argv=0x7fffffffdcc8) at foo.c:5
5	int main(int argc, char **argv) {
Continuing.

Breakpoint 1, main (argc=2, argv=0x7fffffffdcc8) at foo.c:21
21	  j = strlen(s);
Dump of assembler code for function main:
   0x000055555555473a <+0>:	push   %rbp
   0x000055555555473b <+1>:	mov    %rsp,%rbp
   0x000055555555473e <+4>:	sub    $0x50,%rsp
   0x0000555555554742 <+8>:	mov    %edi,-0x44(%rbp)
   0x0000555555554745 <+11>:	mov    %rsi,-0x50(%rbp)
   0x0000555555554749 <+15>:	mov    %fs:0x28,%rax
   0x0000555555554752 <+24>:	mov    %rax,-0x8(%rbp)
   0x0000555555554756 <+28>:	xor    %eax,%eax
   0x0000555555554758 <+30>:	mov    -0x50(%rbp),%rax
   0x000055555555475c <+34>:	add    $0x8,%rax
   0x0000555555554760 <+38>:	mov    (%rax),%rax
   0x0000555555554763 <+41>:	mov    $0xa,%edx
   0x0000555555554768 <+46>:	mov    $0x0,%esi
   0x000055555555476d <+51>:	mov    %rax,%rdi
   0x0000555555554770 <+54>:	callq  0x555555554610 <strtoul@plt>
   0x0000555555554775 <+59>:	mov    %rax,-0x38(%rbp)
   0x0000555555554779 <+63>:	movq   $0x0,-0x30(%rbp)
   0x0000555555554781 <+71>:	movb   $0x0,-0x9(%rbp)
   0x0000555555554785 <+75>:	mov    -0x38(%rbp),%rax
   0x0000555555554789 <+79>:	mov    %rax,-0x20(%rbp)
   0x000055555555478d <+83>:	mov    -0x38(%rbp),%rax
   0x0000555555554791 <+87>:	mov    %eax,%ecx
   0x0000555555554793 <+89>:	movsbw %cl,%ax
   0x0000555555554797 <+93>:	imul   $0x67,%eax,%eax
   0x000055555555479a <+96>:	shr    $0x8,%ax
   0x000055555555479e <+100>:	mov    %eax,%edx
   0x00005555555547a0 <+102>:	sar    $0x2,%dl
   0x00005555555547a3 <+105>:	mov    %ecx,%eax
   0x00005555555547a5 <+107>:	sar    $0x7,%al
   0x00005555555547a8 <+110>:	sub    %eax,%edx
   0x00005555555547aa <+112>:	mov    %edx,%eax
   0x00005555555547ac <+114>:	shl    $0x2,%eax
   0x00005555555547af <+117>:	add    %edx,%eax
   0x00005555555547b1 <+119>:	add    %eax,%eax
   0x00005555555547b3 <+121>:	sub    %eax,%ecx
   0x00005555555547b5 <+123>:	mov    %ecx,%edx
   0x00005555555547b7 <+125>:	mov    %edx,%eax
   0x00005555555547b9 <+127>:	lea    0x30(%rax),%ecx
   0x00005555555547bc <+130>:	mov    -0x30(%rbp),%rax
   0x00005555555547c0 <+134>:	lea    0x1(%rax),%rdx
   0x00005555555547c4 <+138>:	mov    %rdx,-0x30(%rbp)
   0x00005555555547c8 <+142>:	mov    %ecx,%edx
   0x00005555555547ca <+144>:	mov    %dl,-0x9(%rbp,%rax,1)
   0x00005555555547ce <+148>:	mov    -0x38(%rbp),%rax
   0x00005555555547d2 <+152>:	movabs $0xcccccccccccccccd,%rdx
   0x00005555555547dc <+162>:	mul    %rdx
   0x00005555555547df <+165>:	mov    %rdx,%rax
   0x00005555555547e2 <+168>:	shr    $0x3,%rax
   0x00005555555547e6 <+172>:	mov    %rax,-0x38(%rbp)
   0x00005555555547ea <+176>:	cmpq   $0x0,-0x38(%rbp)
   0x00005555555547ef <+181>:	jne    0x55555555478d <main+83>
   0x00005555555547f1 <+183>:	lea    -0x9(%rbp),%rdx
   0x00005555555547f5 <+187>:	mov    -0x30(%rbp),%rax
   0x00005555555547f9 <+191>:	add    %rdx,%rax
   0x00005555555547fc <+194>:	movb   $0x0,(%rax)
=> 0x00005555555547ff <+197>:	lea    -0x9(%rbp),%rax
   0x0000555555554803 <+201>:	mov    %rax,%rdi
   0x0000555555554806 <+204>:	callq  0x5555555545f0 <strlen@plt>
   0x000055555555480b <+209>:	mov    %rax,-0x28(%rbp)
   0x000055555555480f <+213>:	movq   $0x0,-0x30(%rbp)
   0x0000555555554817 <+221>:	lea    -0x9(%rbp),%rax
   0x000055555555481b <+225>:	mov    %rax,%rdi
   0x000055555555481e <+228>:	callq  0x5555555545f0 <strlen@plt>
   0x0000555555554823 <+233>:	sub    $0x1,%rax
   0x0000555555554827 <+237>:	mov    %rax,-0x28(%rbp)
   0x000055555555482b <+241>:	jmp    0x55555555487b <main+321>
   0x000055555555482d <+243>:	lea    -0x9(%rbp),%rdx
   0x0000555555554831 <+247>:	mov    -0x30(%rbp),%rax
   0x0000555555554835 <+251>:	add    %rdx,%rax
   0x0000555555554838 <+254>:	movzbl (%rax),%eax
   0x000055555555483b <+257>:	movsbq %al,%rax
   0x000055555555483f <+261>:	mov    %rax,-0x18(%rbp)
   0x0000555555554843 <+265>:	lea    -0x9(%rbp),%rdx
   0x0000555555554847 <+269>:	mov    -0x28(%rbp),%rax
   0x000055555555484b <+273>:	add    %rdx,%rax
   0x000055555555484e <+276>:	movzbl (%rax),%eax
   0x0000555555554851 <+279>:	lea    -0x9(%rbp),%rcx
   0x0000555555554855 <+283>:	mov    -0x30(%rbp),%rdx
   0x0000555555554859 <+287>:	add    %rcx,%rdx
   0x000055555555485c <+290>:	mov    %al,(%rdx)
   0x000055555555485e <+292>:	mov    -0x18(%rbp),%rax
   0x0000555555554862 <+296>:	mov    %eax,%ecx
   0x0000555555554864 <+298>:	lea    -0x9(%rbp),%rdx
   0x0000555555554868 <+302>:	mov    -0x28(%rbp),%rax
   0x000055555555486c <+306>:	add    %rdx,%rax
   0x000055555555486f <+309>:	mov    %cl,(%rax)
   0x0000555555554871 <+311>:	addq   $0x1,-0x30(%rbp)
   0x0000555555554876 <+316>:	subq   $0x1,-0x28(%rbp)
   0x000055555555487b <+321>:	mov    -0x30(%rbp),%rax
   0x000055555555487f <+325>:	cmp    -0x28(%rbp),%rax
   0x0000555555554883 <+329>:	jb     0x55555555482d <main+243>
   0x0000555555554885 <+331>:	lea    -0x9(%rbp),%rax
   0x0000555555554889 <+335>:	mov    %rax,%rdi
   0x000055555555488c <+338>:	callq  0x5555555545e0 <puts@plt>
   0x0000555555554891 <+343>:	mov    $0x0,%eax
   0x0000555555554896 <+348>:	mov    -0x8(%rbp),%rsi
   0x000055555555489a <+352>:	xor    %fs:0x28,%rsi
   0x00005555555548a3 <+361>:	je     0x5555555548aa <main+368>
   0x00005555555548a5 <+363>:	callq  0x555555554600 <__stack_chk_fail@plt>
   0x00005555555548aa <+368>:	leaveq 
   0x00005555555548ab <+369>:	retq   
End of assembler dump.
Dump of assembler code for function main:
   0x000055555555473a <+0>:	push   %rbp
   0x000055555555473b <+1>:	mov    %rsp,%rbp
   0x000055555555473e <+4>:	sub    $0x50,%rsp
   0x0000555555554742 <+8>:	mov    %edi,-0x44(%rbp)
   0x0000555555554745 <+11>:	mov    %rsi,-0x50(%rbp)
   0x0000555555554749 <+15>:	mov    %fs:0x28,%rax
   0x0000555555554752 <+24>:	mov    %rax,-0x8(%rbp)
   0x0000555555554756 <+28>:	xor    %eax,%eax
   0x0000555555554758 <+30>:	mov    -0x50(%rbp),%rax
   0x000055555555475c <+34>:	add    $0x8,%rax
   0x0000555555554760 <+38>:	mov    (%rax),%rax
   0x0000555555554763 <+41>:	mov    $0xa,%edx
   0x0000555555554768 <+46>:	mov    $0x0,%esi
   0x000055555555476d <+51>:	mov    %rax,%rdi
   0x0000555555554770 <+54>:	callq  0x555555554610 <strtoul@plt>
   0x0000555555554775 <+59>:	mov    %rax,-0x38(%rbp)
   0x0000555555554779 <+63>:	movq   $0x0,-0x30(%rbp)
   0x0000555555554781 <+71>:	movb   $0x0,-0x9(%rbp)
   0x0000555555554785 <+75>:	mov    -0x38(%rbp),%rax
   0x0000555555554789 <+79>:	mov    %rax,-0x20(%rbp)
   0x000055555555478d <+83>:	mov    -0x38(%rbp),%rax
   0x0000555555554791 <+87>:	mov    %eax,%ecx
   0x0000555555554793 <+89>:	movsbw %cl,%ax
   0x0000555555554797 <+93>:	imul   $0x67,%eax,%eax
   0x000055555555479a <+96>:	shr    $0x8,%ax
   0x000055555555479e <+100>:	mov    %eax,%edx
   0x00005555555547a0 <+102>:	sar    $0x2,%dl
   0x00005555555547a3 <+105>:	mov    %ecx,%eax
   0x00005555555547a5 <+107>:	sar    $0x7,%al
   0x00005555555547a8 <+110>:	sub    %eax,%edx
   0x00005555555547aa <+112>:	mov    %edx,%eax
   0x00005555555547ac <+114>:	shl    $0x2,%eax
   0x00005555555547af <+117>:	add    %edx,%eax
   0x00005555555547b1 <+119>:	add    %eax,%eax
   0x00005555555547b3 <+121>:	sub    %eax,%ecx
   0x00005555555547b5 <+123>:	mov    %ecx,%edx
   0x00005555555547b7 <+125>:	mov    %edx,%eax
   0x00005555555547b9 <+127>:	lea    0x30(%rax),%ecx
   0x00005555555547bc <+130>:	mov    -0x30(%rbp),%rax
   0x00005555555547c0 <+134>:	lea    0x1(%rax),%rdx
   0x00005555555547c4 <+138>:	mov    %rdx,-0x30(%rbp)
   0x00005555555547c8 <+142>:	mov    %ecx,%edx
   0x00005555555547ca <+144>:	mov    %dl,-0x9(%rbp,%rax,1)
   0x00005555555547ce <+148>:	mov    -0x38(%rbp),%rax
   0x00005555555547d2 <+152>:	movabs $0xcccccccccccccccd,%rdx
   0x00005555555547dc <+162>:	mul    %rdx
   0x00005555555547df <+165>:	mov    %rdx,%rax
   0x00005555555547e2 <+168>:	shr    $0x3,%rax
   0x00005555555547e6 <+172>:	mov    %rax,-0x38(%rbp)
   0x00005555555547ea <+176>:	cmpq   $0x0,-0x38(%rbp)
   0x00005555555547ef <+181>:	jne    0x55555555478d <main+83>
   0x00005555555547f1 <+183>:	lea    -0x9(%rbp),%rdx
   0x00005555555547f5 <+187>:	mov    -0x30(%rbp),%rax
   0x00005555555547f9 <+191>:	add    %rdx,%rax
   0x00005555555547fc <+194>:	movb   $0x0,(%rax)
=> 0x00005555555547ff <+197>:	lea    -0x9(%rbp),%rax
   0x0000555555554803 <+201>:	mov    %rax,%rdi
   0x0000555555554806 <+204>:	callq  0x5555555545f0 <strlen@plt>
   0x000055555555480b <+209>:	mov    %rax,-0x28(%rbp)
   0x000055555555480f <+213>:	movq   $0x0,-0x30(%rbp)
   0x0000555555554817 <+221>:	lea    -0x9(%rbp),%rax
   0x000055555555481b <+225>:	mov    %rax,%rdi
   0x000055555555481e <+228>:	callq  0x5555555545f0 <strlen@plt>
   0x0000555555554823 <+233>:	sub    $0x1,%rax
   0x0000555555554827 <+237>:	mov    %rax,-0x28(%rbp)
   0x000055555555482b <+241>:	jmp    0x55555555487b <main+321>
   0x000055555555482d <+243>:	lea    -0x9(%rbp),%rdx
   0x0000555555554831 <+247>:	mov    -0x30(%rbp),%rax
   0x0000555555554835 <+251>:	add    %rdx,%rax
   0x0000555555554838 <+254>:	movzbl (%rax),%eax
   0x000055555555483b <+257>:	movsbq %al,%rax
   0x000055555555483f <+261>:	mov    %rax,-0x18(%rbp)
   0x0000555555554843 <+265>:	lea    -0x9(%rbp),%rdx
   0x0000555555554847 <+269>:	mov    -0x28(%rbp),%rax
   0x000055555555484b <+273>:	add    %rdx,%rax
   0x000055555555484e <+276>:	movzbl (%rax),%eax
   0x0000555555554851 <+279>:	lea    -0x9(%rbp),%rcx
   0x0000555555554855 <+283>:	mov    -0x30(%rbp),%rdx
   0x0000555555554859 <+287>:	add    %rcx,%rdx
   0x000055555555485c <+290>:	mov    %al,(%rdx)
   0x000055555555485e <+292>:	mov    -0x18(%rbp),%rax
   0x0000555555554862 <+296>:	mov    %eax,%ecx
   0x0000555555554864 <+298>:	lea    -0x9(%rbp),%rdx
   0x0000555555554868 <+302>:	mov    -0x28(%rbp),%rax
   0x000055555555486c <+306>:	add    %rdx,%rax
   0x000055555555486f <+309>:	mov    %cl,(%rax)
   0x0000555555554871 <+311>:	addq   $0x1,-0x30(%rbp)
   0x0000555555554876 <+316>:	subq   $0x1,-0x28(%rbp)
   0x000055555555487b <+321>:	mov    -0x30(%rbp),%rax
   0x000055555555487f <+325>:	cmp    -0x28(%rbp),%rax
   0x0000555555554883 <+329>:	jb     0x55555555482d <main+243>
   0x0000555555554885 <+331>:	lea    -0x9(%rbp),%rax
   0x0000555555554889 <+335>:	mov    %rax,%rdi
   0x000055555555488c <+338>:	callq  0x5555555545e0 <puts@plt>
   0x0000555555554891 <+343>:	mov    $0x0,%eax
   0x0000555555554896 <+348>:	mov    -0x8(%rbp),%rsi
   0x000055555555489a <+352>:	xor    %fs:0x28,%rsi
   0x00005555555548a3 <+361>:	je     0x5555555548aa <main+368>
   0x00005555555548a5 <+363>:	callq  0x555555554600 <__stack_chk_fail@plt>
   0x00005555555548aa <+368>:	leaveq 
   0x00005555555548ab <+369>:	retq   
End of assembler dump.
Dump of assembler code for function main:
   0x000055555555473a <+0>:	push   %rbp
   0x000055555555473b <+1>:	mov    %rsp,%rbp
   0x000055555555473e <+4>:	sub    $0x50,%rsp
   0x0000555555554742 <+8>:	mov    %edi,-0x44(%rbp)
   0x0000555555554745 <+11>:	mov    %rsi,-0x50(%rbp)
   0x0000555555554749 <+15>:	mov    %fs:0x28,%rax
   0x0000555555554752 <+24>:	mov    %rax,-0x8(%rbp)
   0x0000555555554756 <+28>:	xor    %eax,%eax
   0x0000555555554758 <+30>:	mov    -0x50(%rbp),%rax
   0x000055555555475c <+34>:	add    $0x8,%rax
   0x0000555555554760 <+38>:	mov    (%rax),%rax
   0x0000555555554763 <+41>:	mov    $0xa,%edx
   0x0000555555554768 <+46>:	mov    $0x0,%esi
   0x000055555555476d <+51>:	mov    %rax,%rdi
   0x0000555555554770 <+54>:	callq  0x555555554610 <strtoul@plt>
   0x0000555555554775 <+59>:	mov    %rax,-0x38(%rbp)
   0x0000555555554779 <+63>:	movq   $0x0,-0x30(%rbp)
   0x0000555555554781 <+71>:	movb   $0x0,-0x9(%rbp)
   0x0000555555554785 <+75>:	mov    -0x38(%rbp),%rax
   0x0000555555554789 <+79>:	mov    %rax,-0x20(%rbp)
   0x000055555555478d <+83>:	mov    -0x38(%rbp),%rax
   0x0000555555554791 <+87>:	mov    %eax,%ecx
   0x0000555555554793 <+89>:	movsbw %cl,%ax
   0x0000555555554797 <+93>:	imul   $0x67,%eax,%eax
   0x000055555555479a <+96>:	shr    $0x8,%ax
   0x000055555555479e <+100>:	mov    %eax,%edx
   0x00005555555547a0 <+102>:	sar    $0x2,%dl
   0x00005555555547a3 <+105>:	mov    %ecx,%eax
   0x00005555555547a5 <+107>:	sar    $0x7,%al
   0x00005555555547a8 <+110>:	sub    %eax,%edx
   0x00005555555547aa <+112>:	mov    %edx,%eax
   0x00005555555547ac <+114>:	shl    $0x2,%eax
   0x00005555555547af <+117>:	add    %edx,%eax
   0x00005555555547b1 <+119>:	add    %eax,%eax
   0x00005555555547b3 <+121>:	sub    %eax,%ecx
   0x00005555555547b5 <+123>:	mov    %ecx,%edx
   0x00005555555547b7 <+125>:	mov    %edx,%eax
   0x00005555555547b9 <+127>:	lea    0x30(%rax),%ecx
   0x00005555555547bc <+130>:	mov    -0x30(%rbp),%rax
   0x00005555555547c0 <+134>:	lea    0x1(%rax),%rdx
   0x00005555555547c4 <+138>:	mov    %rdx,-0x30(%rbp)
   0x00005555555547c8 <+142>:	mov    %ecx,%edx
   0x00005555555547ca <+144>:	mov    %dl,-0x9(%rbp,%rax,1)
   0x00005555555547ce <+148>:	mov    -0x38(%rbp),%rax
   0x00005555555547d2 <+152>:	movabs $0xcccccccccccccccd,%rdx
   0x00005555555547dc <+162>:	mul    %rdx
   0x00005555555547df <+165>:	mov    %rdx,%rax
   0x00005555555547e2 <+168>:	shr    $0x3,%rax
   0x00005555555547e6 <+172>:	mov    %rax,-0x38(%rbp)
   0x00005555555547ea <+176>:	cmpq   $0x0,-0x38(%rbp)
   0x00005555555547ef <+181>:	jne    0x55555555478d <main+83>
   0x00005555555547f1 <+183>:	lea    -0x9(%rbp),%rdx
   0x00005555555547f5 <+187>:	mov    -0x30(%rbp),%rax
   0x00005555555547f9 <+191>:	add    %rdx,%rax
   0x00005555555547fc <+194>:	movb   $0x0,(%rax)
=> 0x00005555555547ff <+197>:	lea    -0x9(%rbp),%rax
   0x0000555555554803 <+201>:	mov    %rax,%rdi
   0x0000555555554806 <+204>:	callq  0x5555555545f0 <strlen@plt>
   0x000055555555480b <+209>:	mov    %rax,-0x28(%rbp)
   0x000055555555480f <+213>:	movq   $0x0,-0x30(%rbp)
   0x0000555555554817 <+221>:	lea    -0x9(%rbp),%rax
   0x000055555555481b <+225>:	mov    %rax,%rdi
   0x000055555555481e <+228>:	callq  0x5555555545f0 <strlen@plt>
   0x0000555555554823 <+233>:	sub    $0x1,%rax
   0x0000555555554827 <+237>:	mov    %rax,-0x28(%rbp)
   0x000055555555482b <+241>:	jmp    0x55555555487b <main+321>
   0x000055555555482d <+243>:	lea    -0x9(%rbp),%rdx
   0x0000555555554831 <+247>:	mov    -0x30(%rbp),%rax
   0x0000555555554835 <+251>:	add    %rdx,%rax
   0x0000555555554838 <+254>:	movzbl (%rax),%eax
   0x000055555555483b <+257>:	movsbq %al,%rax
   0x000055555555483f <+261>:	mov    %rax,-0x18(%rbp)
   0x0000555555554843 <+265>:	lea    -0x9(%rbp),%rdx
   0x0000555555554847 <+269>:	mov    -0x28(%rbp),%rax
   0x000055555555484b <+273>:	add    %rdx,%rax
   0x000055555555484e <+276>:	movzbl (%rax),%eax
   0x0000555555554851 <+279>:	lea    -0x9(%rbp),%rcx
   0x0000555555554855 <+283>:	mov    -0x30(%rbp),%rdx
   0x0000555555554859 <+287>:	add    %rcx,%rdx
   0x000055555555485c <+290>:	mov    %al,(%rdx)
   0x000055555555485e <+292>:	mov    -0x18(%rbp),%rax
   0x0000555555554862 <+296>:	mov    %eax,%ecx
   0x0000555555554864 <+298>:	lea    -0x9(%rbp),%rdx
   0x0000555555554868 <+302>:	mov    -0x28(%rbp),%rax
   0x000055555555486c <+306>:	add    %rdx,%rax
   0x000055555555486f <+309>:	mov    %cl,(%rax)
   0x0000555555554871 <+311>:	addq   $0x1,-0x30(%rbp)
   0x0000555555554876 <+316>:	subq   $0x1,-0x28(%rbp)
   0x000055555555487b <+321>:	mov    -0x30(%rbp),%rax
   0x000055555555487f <+325>:	cmp    -0x28(%rbp),%rax
   0x0000555555554883 <+329>:	jb     0x55555555482d <main+243>
   0x0000555555554885 <+331>:	lea    -0x9(%rbp),%rax
   0x0000555555554889 <+335>:	mov    %rax,%rdi
   0x000055555555488c <+338>:	callq  0x5555555545e0 <puts@plt>
   0x0000555555554891 <+343>:	mov    $0x0,%eax
   0x0000555555554896 <+348>:	mov    -0x8(%rbp),%rsi
   0x000055555555489a <+352>:	xor    %fs:0x28,%rsi
   0x00005555555548a3 <+361>:	je     0x5555555548aa <main+368>
   0x00005555555548a5 <+363>:	callq  0x555555554600 <__stack_chk_fail@plt>
   0x00005555555548aa <+368>:	leaveq 
   0x00005555555548ab <+369>:	retq   
End of assembler dump.
Dump of assembler code for function main:
   0x000055555555473a <+0>:	push   %rbp
   0x000055555555473b <+1>:	mov    %rsp,%rbp
   0x000055555555473e <+4>:	sub    $0x50,%rsp
   0x0000555555554742 <+8>:	mov    %edi,-0x44(%rbp)
   0x0000555555554745 <+11>:	mov    %rsi,-0x50(%rbp)
   0x0000555555554749 <+15>:	mov    %fs:0x28,%rax
   0x0000555555554752 <+24>:	mov    %rax,-0x8(%rbp)
   0x0000555555554756 <+28>:	xor    %eax,%eax
   0x0000555555554758 <+30>:	mov    -0x50(%rbp),%rax
   0x000055555555475c <+34>:	add    $0x8,%rax
   0x0000555555554760 <+38>:	mov    (%rax),%rax
   0x0000555555554763 <+41>:	mov    $0xa,%edx
   0x0000555555554768 <+46>:	mov    $0x0,%esi
   0x000055555555476d <+51>:	mov    %rax,%rdi
   0x0000555555554770 <+54>:	callq  0x555555554610 <strtoul@plt>
   0x0000555555554775 <+59>:	mov    %rax,-0x38(%rbp)
   0x0000555555554779 <+63>:	movq   $0x0,-0x30(%rbp)
   0x0000555555554781 <+71>:	movb   $0x0,-0x9(%rbp)
   0x0000555555554785 <+75>:	mov    -0x38(%rbp),%rax
   0x0000555555554789 <+79>:	mov    %rax,-0x20(%rbp)
   0x000055555555478d <+83>:	mov    -0x38(%rbp),%rax
   0x0000555555554791 <+87>:	mov    %eax,%ecx
   0x0000555555554793 <+89>:	movsbw %cl,%ax
   0x0000555555554797 <+93>:	imul   $0x67,%eax,%eax
   0x000055555555479a <+96>:	shr    $0x8,%ax
   0x000055555555479e <+100>:	mov    %eax,%edx
   0x00005555555547a0 <+102>:	sar    $0x2,%dl
   0x00005555555547a3 <+105>:	mov    %ecx,%eax
   0x00005555555547a5 <+107>:	sar    $0x7,%al
   0x00005555555547a8 <+110>:	sub    %eax,%edx
   0x00005555555547aa <+112>:	mov    %edx,%eax
   0x00005555555547ac <+114>:	shl    $0x2,%eax
   0x00005555555547af <+117>:	add    %edx,%eax
   0x00005555555547b1 <+119>:	add    %eax,%eax
   0x00005555555547b3 <+121>:	sub    %eax,%ecx
   0x00005555555547b5 <+123>:	mov    %ecx,%edx
   0x00005555555547b7 <+125>:	mov    %edx,%eax
   0x00005555555547b9 <+127>:	lea    0x30(%rax),%ecx
   0x00005555555547bc <+130>:	mov    -0x30(%rbp),%rax
   0x00005555555547c0 <+134>:	lea    0x1(%rax),%rdx
   0x00005555555547c4 <+138>:	mov    %rdx,-0x30(%rbp)
   0x00005555555547c8 <+142>:	mov    %ecx,%edx
   0x00005555555547ca <+144>:	mov    %dl,-0x9(%rbp,%rax,1)
   0x00005555555547ce <+148>:	mov    -0x38(%rbp),%rax
   0x00005555555547d2 <+152>:	movabs $0xcccccccccccccccd,%rdx
   0x00005555555547dc <+162>:	mul    %rdx
   0x00005555555547df <+165>:	mov    %rdx,%rax
   0x00005555555547e2 <+168>:	shr    $0x3,%rax
   0x00005555555547e6 <+172>:	mov    %rax,-0x38(%rbp)
   0x00005555555547ea <+176>:	cmpq   $0x0,-0x38(%rbp)
   0x00005555555547ef <+181>:	jne    0x55555555478d <main+83>
   0x00005555555547f1 <+183>:	lea    -0x9(%rbp),%rdx
   0x00005555555547f5 <+187>:	mov    -0x30(%rbp),%rax
   0x00005555555547f9 <+191>:	add    %rdx,%rax
   0x00005555555547fc <+194>:	movb   $0x0,(%rax)
=> 0x00005555555547ff <+197>:	lea    -0x9(%rbp),%rax
   0x0000555555554803 <+201>:	mov    %rax,%rdi
   0x0000555555554806 <+204>:	callq  0x5555555545f0 <strlen@plt>
   0x000055555555480b <+209>:	mov    %rax,-0x28(%rbp)
   0x000055555555480f <+213>:	movq   $0x0,-0x30(%rbp)
   0x0000555555554817 <+221>:	lea    -0x9(%rbp),%rax
   0x000055555555481b <+225>:	mov    %rax,%rdi
   0x000055555555481e <+228>:	callq  0x5555555545f0 <strlen@plt>
   0x0000555555554823 <+233>:	sub    $0x1,%rax
   0x0000555555554827 <+237>:	mov    %rax,-0x28(%rbp)
   0x000055555555482b <+241>:	jmp    0x55555555487b <main+321>
   0x000055555555482d <+243>:	lea    -0x9(%rbp),%rdx
   0x0000555555554831 <+247>:	mov    -0x30(%rbp),%rax
   0x0000555555554835 <+251>:	add    %rdx,%rax
   0x0000555555554838 <+254>:	movzbl (%rax),%eax
   0x000055555555483b <+257>:	movsbq %al,%rax
   0x000055555555483f <+261>:	mov    %rax,-0x18(%rbp)
   0x0000555555554843 <+265>:	lea    -0x9(%rbp),%rdx
   0x0000555555554847 <+269>:	mov    -0x28(%rbp),%rax
   0x000055555555484b <+273>:	add    %rdx,%rax
   0x000055555555484e <+276>:	movzbl (%rax),%eax
   0x0000555555554851 <+279>:	lea    -0x9(%rbp),%rcx
   0x0000555555554855 <+283>:	mov    -0x30(%rbp),%rdx
   0x0000555555554859 <+287>:	add    %rcx,%rdx
   0x000055555555485c <+290>:	mov    %al,(%rdx)
   0x000055555555485e <+292>:	mov    -0x18(%rbp),%rax
   0x0000555555554862 <+296>:	mov    %eax,%ecx
   0x0000555555554864 <+298>:	lea    -0x9(%rbp),%rdx
   0x0000555555554868 <+302>:	mov    -0x28(%rbp),%rax
   0x000055555555486c <+306>:	add    %rdx,%rax
   0x000055555555486f <+309>:	mov    %cl,(%rax)
   0x0000555555554871 <+311>:	addq   $0x1,-0x30(%rbp)
   0x0000555555554876 <+316>:	subq   $0x1,-0x28(%rbp)
   0x000055555555487b <+321>:	mov    -0x30(%rbp),%rax
   0x000055555555487f <+325>:	cmp    -0x28(%rbp),%rax
   0x0000555555554883 <+329>:	jb     0x55555555482d <main+243>
   0x0000555555554885 <+331>:	lea    -0x9(%rbp),%rax
   0x0000555555554889 <+335>:	mov    %rax,%rdi
   0x000055555555488c <+338>:	callq  0x5555555545e0 <puts@plt>
   0x0000555555554891 <+343>:	mov    $0x0,%eax
   0x0000555555554896 <+348>:	mov    -0x8(%rbp),%rsi
   0x000055555555489a <+352>:	xor    %fs:0x28,%rsi
   0x00005555555548a3 <+361>:	je     0x5555555548aa <main+368>
   0x00005555555548a5 <+363>:	callq  0x555555554600 <__stack_chk_fail@plt>
   0x00005555555548aa <+368>:	leaveq 
   0x00005555555548ab <+369>:	retq   
End of assembler dump.
22	  for(i = 0, j = strlen(s)-1; i < j; i++, j--) {
$1 = 2
$2 = 54 '6'
$3 = 49 '1'
$4 = 0 '\000'
Continuing.

Breakpoint 2, main (argc=2, argv=0x7fffffffdcc8) at foo.c:28
28	  puts(s);
$5 = 49 '1'
$6 = 54 '6'
$7 = 0 '\000'
Dump of assembler code for function main:
   0x000055555555473a <+0>:	push   %rbp
   0x000055555555473b <+1>:	mov    %rsp,%rbp
   0x000055555555473e <+4>:	sub    $0x50,%rsp
   0x0000555555554742 <+8>:	mov    %edi,-0x44(%rbp)
   0x0000555555554745 <+11>:	mov    %rsi,-0x50(%rbp)
   0x0000555555554749 <+15>:	mov    %fs:0x28,%rax
   0x0000555555554752 <+24>:	mov    %rax,-0x8(%rbp)
   0x0000555555554756 <+28>:	xor    %eax,%eax
   0x0000555555554758 <+30>:	mov    -0x50(%rbp),%rax
   0x000055555555475c <+34>:	add    $0x8,%rax
   0x0000555555554760 <+38>:	mov    (%rax),%rax
   0x0000555555554763 <+41>:	mov    $0xa,%edx
   0x0000555555554768 <+46>:	mov    $0x0,%esi
   0x000055555555476d <+51>:	mov    %rax,%rdi
   0x0000555555554770 <+54>:	callq  0x555555554610 <strtoul@plt>
   0x0000555555554775 <+59>:	mov    %rax,-0x38(%rbp)
   0x0000555555554779 <+63>:	movq   $0x0,-0x30(%rbp)
   0x0000555555554781 <+71>:	movb   $0x0,-0x9(%rbp)
   0x0000555555554785 <+75>:	mov    -0x38(%rbp),%rax
   0x0000555555554789 <+79>:	mov    %rax,-0x20(%rbp)
   0x000055555555478d <+83>:	mov    -0x38(%rbp),%rax
   0x0000555555554791 <+87>:	mov    %eax,%ecx
   0x0000555555554793 <+89>:	movsbw %cl,%ax
   0x0000555555554797 <+93>:	imul   $0x67,%eax,%eax
   0x000055555555479a <+96>:	shr    $0x8,%ax
   0x000055555555479e <+100>:	mov    %eax,%edx
   0x00005555555547a0 <+102>:	sar    $0x2,%dl
   0x00005555555547a3 <+105>:	mov    %ecx,%eax
   0x00005555555547a5 <+107>:	sar    $0x7,%al
   0x00005555555547a8 <+110>:	sub    %eax,%edx
   0x00005555555547aa <+112>:	mov    %edx,%eax
   0x00005555555547ac <+114>:	shl    $0x2,%eax
   0x00005555555547af <+117>:	add    %edx,%eax
   0x00005555555547b1 <+119>:	add    %eax,%eax
   0x00005555555547b3 <+121>:	sub    %eax,%ecx
   0x00005555555547b5 <+123>:	mov    %ecx,%edx
   0x00005555555547b7 <+125>:	mov    %edx,%eax
   0x00005555555547b9 <+127>:	lea    0x30(%rax),%ecx
   0x00005555555547bc <+130>:	mov    -0x30(%rbp),%rax
   0x00005555555547c0 <+134>:	lea    0x1(%rax),%rdx
   0x00005555555547c4 <+138>:	mov    %rdx,-0x30(%rbp)
   0x00005555555547c8 <+142>:	mov    %ecx,%edx
   0x00005555555547ca <+144>:	mov    %dl,-0x9(%rbp,%rax,1)
   0x00005555555547ce <+148>:	mov    -0x38(%rbp),%rax
   0x00005555555547d2 <+152>:	movabs $0xcccccccccccccccd,%rdx
   0x00005555555547dc <+162>:	mul    %rdx
   0x00005555555547df <+165>:	mov    %rdx,%rax
   0x00005555555547e2 <+168>:	shr    $0x3,%rax
   0x00005555555547e6 <+172>:	mov    %rax,-0x38(%rbp)
   0x00005555555547ea <+176>:	cmpq   $0x0,-0x38(%rbp)
   0x00005555555547ef <+181>:	jne    0x55555555478d <main+83>
   0x00005555555547f1 <+183>:	lea    -0x9(%rbp),%rdx
   0x00005555555547f5 <+187>:	mov    -0x30(%rbp),%rax
   0x00005555555547f9 <+191>:	add    %rdx,%rax
   0x00005555555547fc <+194>:	movb   $0x0,(%rax)
   0x00005555555547ff <+197>:	lea    -0x9(%rbp),%rax
   0x0000555555554803 <+201>:	mov    %rax,%rdi
   0x0000555555554806 <+204>:	callq  0x5555555545f0 <strlen@plt>
   0x000055555555480b <+209>:	mov    %rax,-0x28(%rbp)
   0x000055555555480f <+213>:	movq   $0x0,-0x30(%rbp)
   0x0000555555554817 <+221>:	lea    -0x9(%rbp),%rax
   0x000055555555481b <+225>:	mov    %rax,%rdi
   0x000055555555481e <+228>:	callq  0x5555555545f0 <strlen@plt>
   0x0000555555554823 <+233>:	sub    $0x1,%rax
   0x0000555555554827 <+237>:	mov    %rax,-0x28(%rbp)
   0x000055555555482b <+241>:	jmp    0x55555555487b <main+321>
   0x000055555555482d <+243>:	lea    -0x9(%rbp),%rdx
   0x0000555555554831 <+247>:	mov    -0x30(%rbp),%rax
   0x0000555555554835 <+251>:	add    %rdx,%rax
   0x0000555555554838 <+254>:	movzbl (%rax),%eax
   0x000055555555483b <+257>:	movsbq %al,%rax
   0x000055555555483f <+261>:	mov    %rax,-0x18(%rbp)
   0x0000555555554843 <+265>:	lea    -0x9(%rbp),%rdx
   0x0000555555554847 <+269>:	mov    -0x28(%rbp),%rax
   0x000055555555484b <+273>:	add    %rdx,%rax
   0x000055555555484e <+276>:	movzbl (%rax),%eax
   0x0000555555554851 <+279>:	lea    -0x9(%rbp),%rcx
   0x0000555555554855 <+283>:	mov    -0x30(%rbp),%rdx
   0x0000555555554859 <+287>:	add    %rcx,%rdx
   0x000055555555485c <+290>:	mov    %al,(%rdx)
   0x000055555555485e <+292>:	mov    -0x18(%rbp),%rax
   0x0000555555554862 <+296>:	mov    %eax,%ecx
   0x0000555555554864 <+298>:	lea    -0x9(%rbp),%rdx
   0x0000555555554868 <+302>:	mov    -0x28(%rbp),%rax
   0x000055555555486c <+306>:	add    %rdx,%rax
   0x000055555555486f <+309>:	mov    %cl,(%rax)
   0x0000555555554871 <+311>:	addq   $0x1,-0x30(%rbp)
   0x0000555555554876 <+316>:	subq   $0x1,-0x28(%rbp)
   0x000055555555487b <+321>:	mov    -0x30(%rbp),%rax
   0x000055555555487f <+325>:	cmp    -0x28(%rbp),%rax
   0x0000555555554883 <+329>:	jb     0x55555555482d <main+243>
=> 0x0000555555554885 <+331>:	lea    -0x9(%rbp),%rax
   0x0000555555554889 <+335>:	mov    %rax,%rdi
   0x000055555555488c <+338>:	callq  0x5555555545e0 <puts@plt>
   0x0000555555554891 <+343>:	mov    $0x0,%eax
   0x0000555555554896 <+348>:	mov    -0x8(%rbp),%rsi
   0x000055555555489a <+352>:	xor    %fs:0x28,%rsi
   0x00005555555548a3 <+361>:	je     0x5555555548aa <main+368>
   0x00005555555548a5 <+363>:	callq  0x555555554600 <__stack_chk_fail@plt>
   0x00005555555548aa <+368>:	leaveq 
   0x00005555555548ab <+369>:	retq   
End of assembler dump.
rax            0x1	1
rbx            0x0	0
rcx            0x36	54
rdx            0x7fffffffdbd7	140737488346071
rsi            0x7fffffffe112	140737488347410
rdi            0x7fffffffdbd7	140737488346071
rbp            0x7fffffffdbe0	0x7fffffffdbe0
rsp            0x7fffffffdb90	0x7fffffffdb90
r8             0x7fffffffe113	140737488347411
r9             0x0	0
r10            0x7ffff7b82cc0	140737349430464
r11            0xa	10
r12            0x555555554630	93824992233008
r13            0x7fffffffdcc0	140737488346304
r14            0x0	0
r15            0x0	0
rip            0x555555554885	0x555555554885 <main+331>
eflags         0x202	[ IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
30	  return 0;
Dump of assembler code for function main:
   0x000055555555473a <+0>:	push   %rbp
   0x000055555555473b <+1>:	mov    %rsp,%rbp
   0x000055555555473e <+4>:	sub    $0x50,%rsp
   0x0000555555554742 <+8>:	mov    %edi,-0x44(%rbp)
   0x0000555555554745 <+11>:	mov    %rsi,-0x50(%rbp)
   0x0000555555554749 <+15>:	mov    %fs:0x28,%rax
   0x0000555555554752 <+24>:	mov    %rax,-0x8(%rbp)
   0x0000555555554756 <+28>:	xor    %eax,%eax
   0x0000555555554758 <+30>:	mov    -0x50(%rbp),%rax
   0x000055555555475c <+34>:	add    $0x8,%rax
   0x0000555555554760 <+38>:	mov    (%rax),%rax
   0x0000555555554763 <+41>:	mov    $0xa,%edx
   0x0000555555554768 <+46>:	mov    $0x0,%esi
   0x000055555555476d <+51>:	mov    %rax,%rdi
   0x0000555555554770 <+54>:	callq  0x555555554610 <strtoul@plt>
   0x0000555555554775 <+59>:	mov    %rax,-0x38(%rbp)
   0x0000555555554779 <+63>:	movq   $0x0,-0x30(%rbp)
   0x0000555555554781 <+71>:	movb   $0x0,-0x9(%rbp)
   0x0000555555554785 <+75>:	mov    -0x38(%rbp),%rax
   0x0000555555554789 <+79>:	mov    %rax,-0x20(%rbp)
   0x000055555555478d <+83>:	mov    -0x38(%rbp),%rax
   0x0000555555554791 <+87>:	mov    %eax,%ecx
   0x0000555555554793 <+89>:	movsbw %cl,%ax
   0x0000555555554797 <+93>:	imul   $0x67,%eax,%eax
   0x000055555555479a <+96>:	shr    $0x8,%ax
   0x000055555555479e <+100>:	mov    %eax,%edx
   0x00005555555547a0 <+102>:	sar    $0x2,%dl
   0x00005555555547a3 <+105>:	mov    %ecx,%eax
   0x00005555555547a5 <+107>:	sar    $0x7,%al
   0x00005555555547a8 <+110>:	sub    %eax,%edx
   0x00005555555547aa <+112>:	mov    %edx,%eax
   0x00005555555547ac <+114>:	shl    $0x2,%eax
   0x00005555555547af <+117>:	add    %edx,%eax
   0x00005555555547b1 <+119>:	add    %eax,%eax
   0x00005555555547b3 <+121>:	sub    %eax,%ecx
   0x00005555555547b5 <+123>:	mov    %ecx,%edx
   0x00005555555547b7 <+125>:	mov    %edx,%eax
   0x00005555555547b9 <+127>:	lea    0x30(%rax),%ecx
   0x00005555555547bc <+130>:	mov    -0x30(%rbp),%rax
   0x00005555555547c0 <+134>:	lea    0x1(%rax),%rdx
   0x00005555555547c4 <+138>:	mov    %rdx,-0x30(%rbp)
   0x00005555555547c8 <+142>:	mov    %ecx,%edx
   0x00005555555547ca <+144>:	mov    %dl,-0x9(%rbp,%rax,1)
   0x00005555555547ce <+148>:	mov    -0x38(%rbp),%rax
   0x00005555555547d2 <+152>:	movabs $0xcccccccccccccccd,%rdx
   0x00005555555547dc <+162>:	mul    %rdx
   0x00005555555547df <+165>:	mov    %rdx,%rax
   0x00005555555547e2 <+168>:	shr    $0x3,%rax
   0x00005555555547e6 <+172>:	mov    %rax,-0x38(%rbp)
   0x00005555555547ea <+176>:	cmpq   $0x0,-0x38(%rbp)
   0x00005555555547ef <+181>:	jne    0x55555555478d <main+83>
   0x00005555555547f1 <+183>:	lea    -0x9(%rbp),%rdx
   0x00005555555547f5 <+187>:	mov    -0x30(%rbp),%rax
   0x00005555555547f9 <+191>:	add    %rdx,%rax
   0x00005555555547fc <+194>:	movb   $0x0,(%rax)
   0x00005555555547ff <+197>:	lea    -0x9(%rbp),%rax
   0x0000555555554803 <+201>:	mov    %rax,%rdi
   0x0000555555554806 <+204>:	callq  0x5555555545f0 <strlen@plt>
   0x000055555555480b <+209>:	mov    %rax,-0x28(%rbp)
   0x000055555555480f <+213>:	movq   $0x0,-0x30(%rbp)
   0x0000555555554817 <+221>:	lea    -0x9(%rbp),%rax
   0x000055555555481b <+225>:	mov    %rax,%rdi
   0x000055555555481e <+228>:	callq  0x5555555545f0 <strlen@plt>
   0x0000555555554823 <+233>:	sub    $0x1,%rax
   0x0000555555554827 <+237>:	mov    %rax,-0x28(%rbp)
   0x000055555555482b <+241>:	jmp    0x55555555487b <main+321>
   0x000055555555482d <+243>:	lea    -0x9(%rbp),%rdx
   0x0000555555554831 <+247>:	mov    -0x30(%rbp),%rax
   0x0000555555554835 <+251>:	add    %rdx,%rax
   0x0000555555554838 <+254>:	movzbl (%rax),%eax
   0x000055555555483b <+257>:	movsbq %al,%rax
   0x000055555555483f <+261>:	mov    %rax,-0x18(%rbp)
   0x0000555555554843 <+265>:	lea    -0x9(%rbp),%rdx
   0x0000555555554847 <+269>:	mov    -0x28(%rbp),%rax
   0x000055555555484b <+273>:	add    %rdx,%rax
   0x000055555555484e <+276>:	movzbl (%rax),%eax
   0x0000555555554851 <+279>:	lea    -0x9(%rbp),%rcx
   0x0000555555554855 <+283>:	mov    -0x30(%rbp),%rdx
   0x0000555555554859 <+287>:	add    %rcx,%rdx
   0x000055555555485c <+290>:	mov    %al,(%rdx)
   0x000055555555485e <+292>:	mov    -0x18(%rbp),%rax
   0x0000555555554862 <+296>:	mov    %eax,%ecx
   0x0000555555554864 <+298>:	lea    -0x9(%rbp),%rdx
   0x0000555555554868 <+302>:	mov    -0x28(%rbp),%rax
   0x000055555555486c <+306>:	add    %rdx,%rax
   0x000055555555486f <+309>:	mov    %cl,(%rax)
   0x0000555555554871 <+311>:	addq   $0x1,-0x30(%rbp)
   0x0000555555554876 <+316>:	subq   $0x1,-0x28(%rbp)
   0x000055555555487b <+321>:	mov    -0x30(%rbp),%rax
   0x000055555555487f <+325>:	cmp    -0x28(%rbp),%rax
   0x0000555555554883 <+329>:	jb     0x55555555482d <main+243>
   0x0000555555554885 <+331>:	lea    -0x9(%rbp),%rax
   0x0000555555554889 <+335>:	mov    %rax,%rdi
   0x000055555555488c <+338>:	callq  0x5555555545e0 <puts@plt>
=> 0x0000555555554891 <+343>:	mov    $0x0,%eax
   0x0000555555554896 <+348>:	mov    -0x8(%rbp),%rsi
   0x000055555555489a <+352>:	xor    %fs:0x28,%rsi
   0x00005555555548a3 <+361>:	je     0x5555555548aa <main+368>
   0x00005555555548a5 <+363>:	callq  0x555555554600 <__stack_chk_fail@plt>
   0x00005555555548aa <+368>:	leaveq 
   0x00005555555548ab <+369>:	retq   
End of assembler dump.
0x7fffffffdbd8:	0x4f380036	0x9066591f	0x555548b0	0x00005555
0x7fffffffdbe8:	0xf7a05b97	0x00007fff	0x00000000	0x00000020
$8 = 93824994337376
$9 = 0x555555756260
Dump of assembler code for function main:
   0x000055555555473a <+0>:	push   %rbp
   0x000055555555473b <+1>:	mov    %rsp,%rbp
   0x000055555555473e <+4>:	sub    $0x50,%rsp
   0x0000555555554742 <+8>:	mov    %edi,-0x44(%rbp)
   0x0000555555554745 <+11>:	mov    %rsi,-0x50(%rbp)
   0x0000555555554749 <+15>:	mov    %fs:0x28,%rax
   0x0000555555554752 <+24>:	mov    %rax,-0x8(%rbp)
   0x0000555555554756 <+28>:	xor    %eax,%eax
   0x0000555555554758 <+30>:	mov    -0x50(%rbp),%rax
   0x000055555555475c <+34>:	add    $0x8,%rax
   0x0000555555554760 <+38>:	mov    (%rax),%rax
   0x0000555555554763 <+41>:	mov    $0xa,%edx
   0x0000555555554768 <+46>:	mov    $0x0,%esi
   0x000055555555476d <+51>:	mov    %rax,%rdi
   0x0000555555554770 <+54>:	callq  0x555555554610 <strtoul@plt>
   0x0000555555554775 <+59>:	mov    %rax,-0x38(%rbp)
   0x0000555555554779 <+63>:	movq   $0x0,-0x30(%rbp)
   0x0000555555554781 <+71>:	movb   $0x0,-0x9(%rbp)
   0x0000555555554785 <+75>:	mov    -0x38(%rbp),%rax
   0x0000555555554789 <+79>:	mov    %rax,-0x20(%rbp)
   0x000055555555478d <+83>:	mov    -0x38(%rbp),%rax
   0x0000555555554791 <+87>:	mov    %eax,%ecx
   0x0000555555554793 <+89>:	movsbw %cl,%ax
   0x0000555555554797 <+93>:	imul   $0x67,%eax,%eax
   0x000055555555479a <+96>:	shr    $0x8,%ax
   0x000055555555479e <+100>:	mov    %eax,%edx
   0x00005555555547a0 <+102>:	sar    $0x2,%dl
   0x00005555555547a3 <+105>:	mov    %ecx,%eax
   0x00005555555547a5 <+107>:	sar    $0x7,%al
   0x00005555555547a8 <+110>:	sub    %eax,%edx
   0x00005555555547aa <+112>:	mov    %edx,%eax
   0x00005555555547ac <+114>:	shl    $0x2,%eax
   0x00005555555547af <+117>:	add    %edx,%eax
   0x00005555555547b1 <+119>:	add    %eax,%eax
   0x00005555555547b3 <+121>:	sub    %eax,%ecx
   0x00005555555547b5 <+123>:	mov    %ecx,%edx
   0x00005555555547b7 <+125>:	mov    %edx,%eax
   0x00005555555547b9 <+127>:	lea    0x30(%rax),%ecx
   0x00005555555547bc <+130>:	mov    -0x30(%rbp),%rax
   0x00005555555547c0 <+134>:	lea    0x1(%rax),%rdx
   0x00005555555547c4 <+138>:	mov    %rdx,-0x30(%rbp)
   0x00005555555547c8 <+142>:	mov    %ecx,%edx
   0x00005555555547ca <+144>:	mov    %dl,-0x9(%rbp,%rax,1)
   0x00005555555547ce <+148>:	mov    -0x38(%rbp),%rax
   0x00005555555547d2 <+152>:	movabs $0xcccccccccccccccd,%rdx
   0x00005555555547dc <+162>:	mul    %rdx
   0x00005555555547df <+165>:	mov    %rdx,%rax
   0x00005555555547e2 <+168>:	shr    $0x3,%rax
   0x00005555555547e6 <+172>:	mov    %rax,-0x38(%rbp)
   0x00005555555547ea <+176>:	cmpq   $0x0,-0x38(%rbp)
   0x00005555555547ef <+181>:	jne    0x55555555478d <main+83>
   0x00005555555547f1 <+183>:	lea    -0x9(%rbp),%rdx
   0x00005555555547f5 <+187>:	mov    -0x30(%rbp),%rax
   0x00005555555547f9 <+191>:	add    %rdx,%rax
   0x00005555555547fc <+194>:	movb   $0x0,(%rax)
   0x00005555555547ff <+197>:	lea    -0x9(%rbp),%rax
   0x0000555555554803 <+201>:	mov    %rax,%rdi
   0x0000555555554806 <+204>:	callq  0x5555555545f0 <strlen@plt>
   0x000055555555480b <+209>:	mov    %rax,-0x28(%rbp)
   0x000055555555480f <+213>:	movq   $0x0,-0x30(%rbp)
   0x0000555555554817 <+221>:	lea    -0x9(%rbp),%rax
   0x000055555555481b <+225>:	mov    %rax,%rdi
   0x000055555555481e <+228>:	callq  0x5555555545f0 <strlen@plt>
   0x0000555555554823 <+233>:	sub    $0x1,%rax
   0x0000555555554827 <+237>:	mov    %rax,-0x28(%rbp)
   0x000055555555482b <+241>:	jmp    0x55555555487b <main+321>
   0x000055555555482d <+243>:	lea    -0x9(%rbp),%rdx
   0x0000555555554831 <+247>:	mov    -0x30(%rbp),%rax
   0x0000555555554835 <+251>:	add    %rdx,%rax
   0x0000555555554838 <+254>:	movzbl (%rax),%eax
   0x000055555555483b <+257>:	movsbq %al,%rax
   0x000055555555483f <+261>:	mov    %rax,-0x18(%rbp)
   0x0000555555554843 <+265>:	lea    -0x9(%rbp),%rdx
   0x0000555555554847 <+269>:	mov    -0x28(%rbp),%rax
   0x000055555555484b <+273>:	add    %rdx,%rax
   0x000055555555484e <+276>:	movzbl (%rax),%eax
   0x0000555555554851 <+279>:	lea    -0x9(%rbp),%rcx
   0x0000555555554855 <+283>:	mov    -0x30(%rbp),%rdx
   0x0000555555554859 <+287>:	add    %rcx,%rdx
   0x000055555555485c <+290>:	mov    %al,(%rdx)
   0x000055555555485e <+292>:	mov    -0x18(%rbp),%rax
   0x0000555555554862 <+296>:	mov    %eax,%ecx
   0x0000555555554864 <+298>:	lea    -0x9(%rbp),%rdx
   0x0000555555554868 <+302>:	mov    -0x28(%rbp),%rax
   0x000055555555486c <+306>:	add    %rdx,%rax
   0x000055555555486f <+309>:	mov    %cl,(%rax)
   0x0000555555554871 <+311>:	addq   $0x1,-0x30(%rbp)
   0x0000555555554876 <+316>:	subq   $0x1,-0x28(%rbp)
   0x000055555555487b <+321>:	mov    -0x30(%rbp),%rax
   0x000055555555487f <+325>:	cmp    -0x28(%rbp),%rax
   0x0000555555554883 <+329>:	jb     0x55555555482d <main+243>
   0x0000555555554885 <+331>:	lea    -0x9(%rbp),%rax
   0x0000555555554889 <+335>:	mov    %rax,%rdi
   0x000055555555488c <+338>:	callq  0x5555555545e0 <puts@plt>
=> 0x0000555555554891 <+343>:	mov    $0x0,%eax
   0x0000555555554896 <+348>:	mov    -0x8(%rbp),%rsi
   0x000055555555489a <+352>:	xor    %fs:0x28,%rsi
   0x00005555555548a3 <+361>:	je     0x5555555548aa <main+368>
   0x00005555555548a5 <+363>:	callq  0x555555554600 <__stack_chk_fail@plt>
   0x00005555555548aa <+368>:	leaveq 
   0x00005555555548ab <+369>:	retq   
End of assembler dump.
32	}
Dump of assembler code for function main:
   0x000055555555473a <+0>:	push   %rbp
   0x000055555555473b <+1>:	mov    %rsp,%rbp
   0x000055555555473e <+4>:	sub    $0x50,%rsp
   0x0000555555554742 <+8>:	mov    %edi,-0x44(%rbp)
   0x0000555555554745 <+11>:	mov    %rsi,-0x50(%rbp)
   0x0000555555554749 <+15>:	mov    %fs:0x28,%rax
   0x0000555555554752 <+24>:	mov    %rax,-0x8(%rbp)
   0x0000555555554756 <+28>:	xor    %eax,%eax
   0x0000555555554758 <+30>:	mov    -0x50(%rbp),%rax
   0x000055555555475c <+34>:	add    $0x8,%rax
   0x0000555555554760 <+38>:	mov    (%rax),%rax
   0x0000555555554763 <+41>:	mov    $0xa,%edx
   0x0000555555554768 <+46>:	mov    $0x0,%esi
   0x000055555555476d <+51>:	mov    %rax,%rdi
   0x0000555555554770 <+54>:	callq  0x555555554610 <strtoul@plt>
   0x0000555555554775 <+59>:	mov    %rax,-0x38(%rbp)
   0x0000555555554779 <+63>:	movq   $0x0,-0x30(%rbp)
   0x0000555555554781 <+71>:	movb   $0x0,-0x9(%rbp)
   0x0000555555554785 <+75>:	mov    -0x38(%rbp),%rax
   0x0000555555554789 <+79>:	mov    %rax,-0x20(%rbp)
   0x000055555555478d <+83>:	mov    -0x38(%rbp),%rax
   0x0000555555554791 <+87>:	mov    %eax,%ecx
   0x0000555555554793 <+89>:	movsbw %cl,%ax
   0x0000555555554797 <+93>:	imul   $0x67,%eax,%eax
   0x000055555555479a <+96>:	shr    $0x8,%ax
   0x000055555555479e <+100>:	mov    %eax,%edx
   0x00005555555547a0 <+102>:	sar    $0x2,%dl
   0x00005555555547a3 <+105>:	mov    %ecx,%eax
   0x00005555555547a5 <+107>:	sar    $0x7,%al
   0x00005555555547a8 <+110>:	sub    %eax,%edx
   0x00005555555547aa <+112>:	mov    %edx,%eax
   0x00005555555547ac <+114>:	shl    $0x2,%eax
   0x00005555555547af <+117>:	add    %edx,%eax
   0x00005555555547b1 <+119>:	add    %eax,%eax
   0x00005555555547b3 <+121>:	sub    %eax,%ecx
   0x00005555555547b5 <+123>:	mov    %ecx,%edx
   0x00005555555547b7 <+125>:	mov    %edx,%eax
   0x00005555555547b9 <+127>:	lea    0x30(%rax),%ecx
   0x00005555555547bc <+130>:	mov    -0x30(%rbp),%rax
   0x00005555555547c0 <+134>:	lea    0x1(%rax),%rdx
   0x00005555555547c4 <+138>:	mov    %rdx,-0x30(%rbp)
   0x00005555555547c8 <+142>:	mov    %ecx,%edx
   0x00005555555547ca <+144>:	mov    %dl,-0x9(%rbp,%rax,1)
   0x00005555555547ce <+148>:	mov    -0x38(%rbp),%rax
   0x00005555555547d2 <+152>:	movabs $0xcccccccccccccccd,%rdx
   0x00005555555547dc <+162>:	mul    %rdx
   0x00005555555547df <+165>:	mov    %rdx,%rax
   0x00005555555547e2 <+168>:	shr    $0x3,%rax
   0x00005555555547e6 <+172>:	mov    %rax,-0x38(%rbp)
   0x00005555555547ea <+176>:	cmpq   $0x0,-0x38(%rbp)
   0x00005555555547ef <+181>:	jne    0x55555555478d <main+83>
   0x00005555555547f1 <+183>:	lea    -0x9(%rbp),%rdx
   0x00005555555547f5 <+187>:	mov    -0x30(%rbp),%rax
   0x00005555555547f9 <+191>:	add    %rdx,%rax
   0x00005555555547fc <+194>:	movb   $0x0,(%rax)
   0x00005555555547ff <+197>:	lea    -0x9(%rbp),%rax
   0x0000555555554803 <+201>:	mov    %rax,%rdi
   0x0000555555554806 <+204>:	callq  0x5555555545f0 <strlen@plt>
   0x000055555555480b <+209>:	mov    %rax,-0x28(%rbp)
   0x000055555555480f <+213>:	movq   $0x0,-0x30(%rbp)
   0x0000555555554817 <+221>:	lea    -0x9(%rbp),%rax
   0x000055555555481b <+225>:	mov    %rax,%rdi
   0x000055555555481e <+228>:	callq  0x5555555545f0 <strlen@plt>
   0x0000555555554823 <+233>:	sub    $0x1,%rax
   0x0000555555554827 <+237>:	mov    %rax,-0x28(%rbp)
   0x000055555555482b <+241>:	jmp    0x55555555487b <main+321>
   0x000055555555482d <+243>:	lea    -0x9(%rbp),%rdx
   0x0000555555554831 <+247>:	mov    -0x30(%rbp),%rax
   0x0000555555554835 <+251>:	add    %rdx,%rax
   0x0000555555554838 <+254>:	movzbl (%rax),%eax
   0x000055555555483b <+257>:	movsbq %al,%rax
   0x000055555555483f <+261>:	mov    %rax,-0x18(%rbp)
   0x0000555555554843 <+265>:	lea    -0x9(%rbp),%rdx
   0x0000555555554847 <+269>:	mov    -0x28(%rbp),%rax
   0x000055555555484b <+273>:	add    %rdx,%rax
   0x000055555555484e <+276>:	movzbl (%rax),%eax
   0x0000555555554851 <+279>:	lea    -0x9(%rbp),%rcx
   0x0000555555554855 <+283>:	mov    -0x30(%rbp),%rdx
   0x0000555555554859 <+287>:	add    %rcx,%rdx
   0x000055555555485c <+290>:	mov    %al,(%rdx)
   0x000055555555485e <+292>:	mov    -0x18(%rbp),%rax
   0x0000555555554862 <+296>:	mov    %eax,%ecx
   0x0000555555554864 <+298>:	lea    -0x9(%rbp),%rdx
   0x0000555555554868 <+302>:	mov    -0x28(%rbp),%rax
   0x000055555555486c <+306>:	add    %rdx,%rax
   0x000055555555486f <+309>:	mov    %cl,(%rax)
   0x0000555555554871 <+311>:	addq   $0x1,-0x30(%rbp)
   0x0000555555554876 <+316>:	subq   $0x1,-0x28(%rbp)
   0x000055555555487b <+321>:	mov    -0x30(%rbp),%rax
   0x000055555555487f <+325>:	cmp    -0x28(%rbp),%rax
   0x0000555555554883 <+329>:	jb     0x55555555482d <main+243>
   0x0000555555554885 <+331>:	lea    -0x9(%rbp),%rax
   0x0000555555554889 <+335>:	mov    %rax,%rdi
   0x000055555555488c <+338>:	callq  0x5555555545e0 <puts@plt>
   0x0000555555554891 <+343>:	mov    $0x0,%eax
=> 0x0000555555554896 <+348>:	mov    -0x8(%rbp),%rsi
   0x000055555555489a <+352>:	xor    %fs:0x28,%rsi
   0x00005555555548a3 <+361>:	je     0x5555555548aa <main+368>
   0x00005555555548a5 <+363>:	callq  0x555555554600 <__stack_chk_fail@plt>
   0x00005555555548aa <+368>:	leaveq 
   0x00005555555548ab <+369>:	retq   
End of assembler dump.
rax            0x0	0
rbx            0x0	0
rcx            0x7ffff7af4154	140737348845908
rdx            0x7ffff7dd18c0	140737351850176
rsi            0x555555756260	93824994337376
rdi            0x1	1
rbp            0x7fffffffdbe0	0x7fffffffdbe0
rsp            0x7fffffffdb90	0x7fffffffdb90
r8             0x0	0
r9             0x0	0
r10            0x555555756010	93824994336784
r11            0x246	582
r12            0x555555554630	93824992233008
r13            0x7fffffffdcc0	140737488346304
r14            0x0	0
r15            0x0	0
rip            0x555555554896	0x555555554896 <main+348>
eflags         0x202	[ IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
0x7fffffffdbd8:	0x4f380036	0x9066591f	0x555548b0	0x00005555
0x7fffffffdbe8:	0xf7a05b97	0x00007fff	0x00000000	0x00000020
0x000055555555489a	32	}
rax            0x0	0
rbx            0x0	0
rcx            0x7ffff7af4154	140737348845908
rdx            0x7ffff7dd18c0	140737351850176
rsi            0x9066591f4f380036	-8041642093615513546
rdi            0x1	1
rbp            0x7fffffffdbe0	0x7fffffffdbe0
rsp            0x7fffffffdb90	0x7fffffffdb90
r8             0x0	0
r9             0x0	0
r10            0x555555756010	93824994336784
r11            0x246	582
r12            0x555555554630	93824992233008
r13            0x7fffffffdcc0	140737488346304
r14            0x0	0
r15            0x0	0
rip            0x55555555489a	0x55555555489a <main+352>
eflags         0x202	[ IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
$10 = 0
Dump of assembler code for function main:
   0x000055555555473a <+0>:	push   %rbp
   0x000055555555473b <+1>:	mov    %rsp,%rbp
   0x000055555555473e <+4>:	sub    $0x50,%rsp
   0x0000555555554742 <+8>:	mov    %edi,-0x44(%rbp)
   0x0000555555554745 <+11>:	mov    %rsi,-0x50(%rbp)
   0x0000555555554749 <+15>:	mov    %fs:0x28,%rax
   0x0000555555554752 <+24>:	mov    %rax,-0x8(%rbp)
   0x0000555555554756 <+28>:	xor    %eax,%eax
   0x0000555555554758 <+30>:	mov    -0x50(%rbp),%rax
   0x000055555555475c <+34>:	add    $0x8,%rax
   0x0000555555554760 <+38>:	mov    (%rax),%rax
   0x0000555555554763 <+41>:	mov    $0xa,%edx
   0x0000555555554768 <+46>:	mov    $0x0,%esi
   0x000055555555476d <+51>:	mov    %rax,%rdi
   0x0000555555554770 <+54>:	callq  0x555555554610 <strtoul@plt>
   0x0000555555554775 <+59>:	mov    %rax,-0x38(%rbp)
   0x0000555555554779 <+63>:	movq   $0x0,-0x30(%rbp)
   0x0000555555554781 <+71>:	movb   $0x0,-0x9(%rbp)
   0x0000555555554785 <+75>:	mov    -0x38(%rbp),%rax
   0x0000555555554789 <+79>:	mov    %rax,-0x20(%rbp)
   0x000055555555478d <+83>:	mov    -0x38(%rbp),%rax
   0x0000555555554791 <+87>:	mov    %eax,%ecx
   0x0000555555554793 <+89>:	movsbw %cl,%ax
   0x0000555555554797 <+93>:	imul   $0x67,%eax,%eax
   0x000055555555479a <+96>:	shr    $0x8,%ax
   0x000055555555479e <+100>:	mov    %eax,%edx
   0x00005555555547a0 <+102>:	sar    $0x2,%dl
   0x00005555555547a3 <+105>:	mov    %ecx,%eax
   0x00005555555547a5 <+107>:	sar    $0x7,%al
   0x00005555555547a8 <+110>:	sub    %eax,%edx
   0x00005555555547aa <+112>:	mov    %edx,%eax
   0x00005555555547ac <+114>:	shl    $0x2,%eax
   0x00005555555547af <+117>:	add    %edx,%eax
   0x00005555555547b1 <+119>:	add    %eax,%eax
   0x00005555555547b3 <+121>:	sub    %eax,%ecx
   0x00005555555547b5 <+123>:	mov    %ecx,%edx
   0x00005555555547b7 <+125>:	mov    %edx,%eax
   0x00005555555547b9 <+127>:	lea    0x30(%rax),%ecx
   0x00005555555547bc <+130>:	mov    -0x30(%rbp),%rax
   0x00005555555547c0 <+134>:	lea    0x1(%rax),%rdx
   0x00005555555547c4 <+138>:	mov    %rdx,-0x30(%rbp)
   0x00005555555547c8 <+142>:	mov    %ecx,%edx
   0x00005555555547ca <+144>:	mov    %dl,-0x9(%rbp,%rax,1)
   0x00005555555547ce <+148>:	mov    -0x38(%rbp),%rax
   0x00005555555547d2 <+152>:	movabs $0xcccccccccccccccd,%rdx
   0x00005555555547dc <+162>:	mul    %rdx
   0x00005555555547df <+165>:	mov    %rdx,%rax
   0x00005555555547e2 <+168>:	shr    $0x3,%rax
   0x00005555555547e6 <+172>:	mov    %rax,-0x38(%rbp)
   0x00005555555547ea <+176>:	cmpq   $0x0,-0x38(%rbp)
   0x00005555555547ef <+181>:	jne    0x55555555478d <main+83>
   0x00005555555547f1 <+183>:	lea    -0x9(%rbp),%rdx
   0x00005555555547f5 <+187>:	mov    -0x30(%rbp),%rax
   0x00005555555547f9 <+191>:	add    %rdx,%rax
   0x00005555555547fc <+194>:	movb   $0x0,(%rax)
   0x00005555555547ff <+197>:	lea    -0x9(%rbp),%rax
   0x0000555555554803 <+201>:	mov    %rax,%rdi
   0x0000555555554806 <+204>:	callq  0x5555555545f0 <strlen@plt>
   0x000055555555480b <+209>:	mov    %rax,-0x28(%rbp)
   0x000055555555480f <+213>:	movq   $0x0,-0x30(%rbp)
   0x0000555555554817 <+221>:	lea    -0x9(%rbp),%rax
   0x000055555555481b <+225>:	mov    %rax,%rdi
   0x000055555555481e <+228>:	callq  0x5555555545f0 <strlen@plt>
   0x0000555555554823 <+233>:	sub    $0x1,%rax
   0x0000555555554827 <+237>:	mov    %rax,-0x28(%rbp)
   0x000055555555482b <+241>:	jmp    0x55555555487b <main+321>
   0x000055555555482d <+243>:	lea    -0x9(%rbp),%rdx
   0x0000555555554831 <+247>:	mov    -0x30(%rbp),%rax
   0x0000555555554835 <+251>:	add    %rdx,%rax
   0x0000555555554838 <+254>:	movzbl (%rax),%eax
   0x000055555555483b <+257>:	movsbq %al,%rax
   0x000055555555483f <+261>:	mov    %rax,-0x18(%rbp)
   0x0000555555554843 <+265>:	lea    -0x9(%rbp),%rdx
   0x0000555555554847 <+269>:	mov    -0x28(%rbp),%rax
   0x000055555555484b <+273>:	add    %rdx,%rax
   0x000055555555484e <+276>:	movzbl (%rax),%eax
   0x0000555555554851 <+279>:	lea    -0x9(%rbp),%rcx
   0x0000555555554855 <+283>:	mov    -0x30(%rbp),%rdx
   0x0000555555554859 <+287>:	add    %rcx,%rdx
   0x000055555555485c <+290>:	mov    %al,(%rdx)
   0x000055555555485e <+292>:	mov    -0x18(%rbp),%rax
   0x0000555555554862 <+296>:	mov    %eax,%ecx
   0x0000555555554864 <+298>:	lea    -0x9(%rbp),%rdx
   0x0000555555554868 <+302>:	mov    -0x28(%rbp),%rax
   0x000055555555486c <+306>:	add    %rdx,%rax
   0x000055555555486f <+309>:	mov    %cl,(%rax)
   0x0000555555554871 <+311>:	addq   $0x1,-0x30(%rbp)
   0x0000555555554876 <+316>:	subq   $0x1,-0x28(%rbp)
   0x000055555555487b <+321>:	mov    -0x30(%rbp),%rax
   0x000055555555487f <+325>:	cmp    -0x28(%rbp),%rax
   0x0000555555554883 <+329>:	jb     0x55555555482d <main+243>
   0x0000555555554885 <+331>:	lea    -0x9(%rbp),%rax
   0x0000555555554889 <+335>:	mov    %rax,%rdi
   0x000055555555488c <+338>:	callq  0x5555555545e0 <puts@plt>
   0x0000555555554891 <+343>:	mov    $0x0,%eax
   0x0000555555554896 <+348>:	mov    -0x8(%rbp),%rsi
=> 0x000055555555489a <+352>:	xor    %fs:0x28,%rsi
   0x00005555555548a3 <+361>:	je     0x5555555548aa <main+368>
   0x00005555555548a5 <+363>:	callq  0x555555554600 <__stack_chk_fail@plt>
   0x00005555555548aa <+368>:	leaveq 
   0x00005555555548ab <+369>:	retq   
End of assembler dump.
0x00005555555548a3	32	}
0x00005555555548a5	32	}
0x0000555555554600 in __stack_chk_fail@plt ()
Continuing.

Program received signal SIGABRT, Aborted.
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:51
51	../sysdeps/unix/sysv/linux/raise.c: No such file or directory.
Continuing.

Program terminated with signal SIGABRT, Aborted.
The program no longer exists.
The program is not being run.
